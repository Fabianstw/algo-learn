import { Language } from "../../utils/translations"

/**
 * Base type for Question objects; Questions are generated by QuestionGenerators
 * and contain the already-translated question descriptions and texts in
 * markdown-style syntax. All Question object must have at least these
 * properties.
 */
export interface Question {
  type: "MultipleChoiceQuestion" | "SortQuestion" | "FreeTextQuestion" // The type of the question
  path: string // The path to the question generator this question was generated from
  name: string // The title of the question
  lang: Language // The language used in this question
  parameters: Parameters // The parameters used when generating the question
}

/**
 * MultipleChoiceQuestion stores the generated data of multiple choice
 * questions.
 */
export interface MultipleChoiceQuestion extends Question {
  type: "MultipleChoiceQuestion"
  text: string // The text of the question
  answers: string[] // List of possible answers to the question
  allowMultipleAnswers: boolean // Whether multiple answers are allowed
}

/**
 * After the user selects answer(s), these answeres are stored as a
 * MultipleChoiceAnswer object.
 */
export interface MultipleChoiceAnswer {
  checked: number[] // The indices of all answers selected by the user
}

/**
 * The QuestionGenerator provides a feedback function that is given the question
 * and the answer given by the user and returns feedback on the answer. This
 * feedback is a MultipleChoiceFeedback object, which is then shown to the
 * user.
 */
export interface MultipleChoiceFeedback {
  correct: boolean // Whether the selected answer(s) are exactly correct
  correctAnswers: number[] // The indices of all correct answers
  feedbackText: string // The feedback text to show to the user
}

/** The signature of the feedback function for multiple-choice questions */
export type FeedbackFunction<MultipleChoiceQuestion> = (
  question: MultipleChoiceQuestion,
  answer: MultipleChoiceAnswer
) => MultipleChoiceFeedback

/**
 * Each QuestionGenerator may support multiple variants and parameters with
 * which the difficulty and focus of the question can be adjusted. The
 * QuestionGenerator should provide a list of allowed parameters along with
 * their types, descriptions, and allowed values.
 */
export interface ParameterBase {
  name: string
  description: (lang: Language) => string
}

/**
 * IntegerParameters are parameters that can be set to an integer value. They
 * may have a minimum and maximum value.
 */
export interface IntegerParameter extends ParameterBase {
  type: "integer"
  min?: number
  max?: number
}

/**
 * StringParameters are parameters that can be set to a string value. They may
 * have an explicit list of allowed values.
 */
export interface StringParameter extends ParameterBase {
  type: "string"
  allowedValues?: string[]
}

/** AllowedParameter is the union of all allowed parameter types. */
export type AllowedParameter = IntegerParameter | StringParameter

/**
 * An object of type Parameters is what is given as input to the
 * QuestionGenerator to generate a question.
 */
export interface Parameters extends Record<string, string | number> {
  // it would be possible to add mandatory parameters here, such as
  // seed: string
}

/**
 * QuestionGenerator type for generating questions.
 *
 * Here, TQuestion is a generic type that represents the question type, for
 * example MultipleChoiceQuestion, etc.
 */
export interface QuestionGenerator<TQuestion extends Question> {
  path: string // Can be used as part of the URL (only lower-case letters, numbers and dashes)
  name: (lang: Language) => string // Readable name of the question
  description: (lang: Language) => string // Short description of the question
  tags?: string[] // Tags for the question
  languages: Language[] // List of supported languages
  author?: string // Author of the question
  version?: string // Version of the question
  license?: string // License of the question
  link?: string // Link to the source code of the question

  /** List of allowed parameters for the question. */
  allowedParameters: AllowedParameter[]

  /**
   * Function to generate an instance of the question from the given parameters.
   * This function must be implemented by each QuestionGenerator object.
   *
   * @param parameters The parameters to use when generating the question
   * @param lang The language to use when generating the question
   * @returns An instance of the question
   */
  generate: (parameters: Parameters, lang?: Language) => TQuestion

  /**
   * The feedback function checks whether the answer given by the user is
   * correct and gives feedback on it. The function signature of the function is
   * defined for each question type, for example,
   * FeedbackFunction<MultipleChoiceQuestion>. The function must be implemented
   * by each question generator.
   */
  feedback: FeedbackFunction<TQuestion>
}

/**
 * Function to export the question in JSON format
 *
 * @param question The question to export
 * @returns The question in JSON format
 */
export function toJSON(question: Question): string {
  return JSON.stringify(question, null, 2).replace("\\\\", "\\")
}
