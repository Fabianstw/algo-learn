import { Language } from "../../utils/translations"

/**
 * Objects of type Question are generated by QuestionGenerators. There are only
 * a handful of question types. Whenever a new QuestionGenerator wants to
 * explore a new interaction pattern, the existing types should be extended with
 * optional properties. If this is not possible, a new question type should be
 * added.
 */
export type Question = MultipleChoiceQuestion // | FreeTextQuestion

/**
 * Base type for all question types; they must contain the already-translated
 * question descriptions and texts in markdown-style syntax. All Question object
 * must have at least these properties.
 */
export interface QuestionBase {
  type: string // The type of the question
  path: string // Unique path to this question; for example, "/en/topic/questiongenerator1/variant1/VeryRandomSeed". The path must contain all parameters necessary to re-generate the question.
  name: string // The name of the question
}

/**
 * MultipleChoiceQuestion stores the generated data of multiple choice
 * questions.
 */
export interface MultipleChoiceQuestion extends QuestionBase {
  type: "MultipleChoiceQuestion"
  text: string // The text of the question
  answers: string[] // List of possible answers to the question
  allowMultiple?: boolean // Whether multiple answers can be selected; defaults to false
  sorting?: boolean // Whether the question is a sorting question; defaults to false
}

/**
 * After the user selects answer(s), these answeres are stored as a
 * MultipleChoiceAnswer object.
 */
export interface MultipleChoiceAnswer {
  choice: number[] // The indices of all answers selected by the user; the order is relevant only if sortingQuestion is true
}

/**
 * The QuestionGenerator provides a feedback function that is given the question
 * and the answer given by the user and returns feedback on the answer. This
 * feedback is a MultipleChoiceFeedback object, which is then shown to the
 * user.
 */
export interface MultipleChoiceFeedback {
  correct: boolean // Whether the choice is exactly correct.
  correctChoice?: number[] // The correct choice; the order is relevant only if sortingQuestion is true. (optional)
  feedbackText?: string // The feedback text to show to the user. (optional)
}

/** The signature of the feedback function for multiple-choice questions */
export type MultipleChoiceFeedbackFunction = (
  answer: MultipleChoiceAnswer
) => MultipleChoiceFeedback

/** In general, we can add new types of feedback functions for new question types */
export type FeedbackFunction = MultipleChoiceFeedbackFunction // | FreeTextFeedbackFunction

/**
 * Each QuestionGenerator may support multiple variants and parameters with
 * which the difficulty and focus of the question can be adjusted. The
 * QuestionGenerator should provide a list of allowed parameters along with
 * their types, descriptions, and allowed values.
 */
export interface ParameterBase {
  name: string
  description: (lang: Language) => string
}

/**
 * IntegerParameters are parameters that can be set to an integer value. They
 * may have a minimum and maximum value.
 */
export interface IntegerParameter extends ParameterBase {
  type: "integer"
  min?: number
  max?: number
}

/**
 * StringParameters are parameters that can be set to a string value. They may
 * have an explicit list of allowed values.
 */
export interface StringParameter extends ParameterBase {
  type: "string"
  allowedValues?: string[]
}

/** AllowedParameter is the union of all allowed parameter types. */
export type AllowedParameter = IntegerParameter | StringParameter

/**
 * An object of type Parameters is what is given as input to the
 * QuestionGenerator to generate a question.
 */
export interface Parameters extends Record<string, string | number> {
  // it would be possible to add mandatory parameters here, such as
  // seed: string
}

/**
 * QuestionGenerator type for generating questions.
 *
 * Here, TQuestion is a generic type that represents the question type, for
 * example MultipleChoiceQuestion, etc.
 */
export interface QuestionGenerator {
  path: string // Can be used as part of the URL (only lower-case letters, numbers and dashes)
  languages: Language[] // List of supported languages
  name: (lang: Language) => string // Readable name of the question
  description: (lang: Language) => string // Short description of the question
  tags?: string[] // Tags for the question
  author?: string // Author of the question
  version?: string // Version of the question
  license?: string // License of the question
  link?: string // Link to the source code of the question

  /** List of allowed parameters for the question. */
  allowedParameters: AllowedParameter[]

  /**
   * Function to generate an instance of the question from the given parameters,
   * as well as the feedback function for this question. The function must be
   * implemented by each QuestionGenerator object.
   *
   * @param parameters The parameters to use when generating the question
   * @param lang The language to use when generating the question
   * @returns The question as well as the feedback function for the question as
   *   a closure. Additional properties may be added to the output object to
   *   provide unit tests.
   */
  generate: (
    parameters: Parameters,
    lang?: Language
  ) => {
    question: Question
    feedback?: FeedbackFunction
  }
}

/**
 * Function to export the question in JSON format
 *
 * @param question The question to export
 * @returns The question in JSON format
 */
export function toJSON(question: Question): string {
  return JSON.stringify(question, null, 2).replace("\\\\", "\\")
}
